l = [i for i in range(101) if not i % 2]
g = (i for i in range(101) if not i % 2)


# Реализовать асинхронный HTTP-сервер, обрабатывающий поисковые запросы пользователей. Работа сервиса описывается так:
# 1. Сервер принимает текстовый запрос пользователя.
# 2. Определяет, к какой теме или темам может принадлежать запрос (подробности см. ниже).
# 3. Выдает результат в формате json, в котором указан список соответствующих запросу тем.
# Каждая тема определяется набором фраз, например:
# • новости: "деревья на Садовом кольце", "добрый автобус", "выставка IT-технологий";
# • кухня: "рецепт борща", "яблочный пирог", "тайская кухня";
# • товары: "Дети капитана Гранта", "зимние шины", "Тайская кухня";
# или любые другие, на ваше усмотрение. Важно, чтобы какая-то из фраз встретилась в нескольких наборах индексов, как "тайская кухня" в примере.
# Важно! Предполагается, что наборы фраз все умещаются в оперативной памяти, но при этом могут быть достаточно большими, поэтому внимание нужно обратить на скорость работы.
# Правило принадлежности запроса теме:
# 1. Если набор слов из запроса содержит в себе все слова какой-либо из фраз, то запрос считается соответствующим теме. Иначе - не соответствующим.
# 2. Порядок слов в запросе и во фразах не учитывается.
# Примеры:
# • Запрос "где купить зимние шины" соответствует теме "товары", т.к. содержит в себе все слова из фразы "зимние шины".
# • Запрос "борща любимого рецепт" соответствует теме "кухня", т.к. содержит в себе все слова из фразы "рецепт борща". Запрос "тайская кухня" соответствует двум темам: "кухня" и "товары".
# • Запрос "кухня" не соответствует ни одной теме, т.к. не включает в себя целиком слова ни одной из фраз.


category_dict = {
    'деревья': ['новости'],
    'Садовом': ['новости'],
    'кольце': ['новости'],
    'рецепт': ['кухня'],
    'борща': ['кухня'],
    'яблочный': ['кухня'],
    'пирог': ['кухня'],
    'тайская': ['кухня', 'товары'],
    'кухня': ['кухня', 'товары'],
    'зимние': ['товары'],
    'шины': ['товары']
}


def determine_topic(query):
    words = query.split()
    topics = set()
    for word in words:
        if word in category_dict:
            topics.update(category_dict[word])

    if topics:
        return list(topics)
    else:
        return ['Не определено']
